# важливо зауважити, що будемо передавати вираз з урахуванням пробілу
# між операндами та операторами; тобто, таким чином: 2 + 4 (щоб не виникло проблем з формуванням масиву ARGV)
puts("-----------------------------------------------------------")
puts("Конвертор виразу у \"польський інверсний запис\"!")

# перевіримо передений вираз на наявність достатньої кількості аргументів
# (будемо вважати, що для виконання програми необхідно передати вираз, що наличує 3 аргументи)
if ARGV.length < 3
  puts("Пробачте, кількість аргументів замала!\nНаприклад, найпростіший вираз \"3 + 4\" має 3 аргументи!")
  puts("-----------------------------------------------------------")
  exit
end

# виключаємо ситуацію, коли в якості аргументу було передано "9+" і т.п.
for i in ARGV
  if i.length >= 2
    puts("Помилка: неправильний запис аргументу: #{i}!")
    puts("-----------------------------------------------------------")
    exit
  end
end

# створимо допоміжний двовимірний масив з можливими операторами, щоб "не заплутатись" з пріорітетами
# (тобто "+" і "-" мають 0-вий пріорітет, а "/", "*", "×" - більш важливий (одиничний))
operators = [["-", "+"], ["/", "*", "×"]]

# створимо масив-список для виведення кінцевого результату
result = []
# створимо стек для тимчасового збереження операторів, що містяться у переданому виразі
help_stack = []

# метод для перевірки пріоритету операторів
def check_priority (arr, x)
  if arr[0].include? x
    0
  else
    1
  end
end

# проходимо по масиву ARGV, що містить початковий вираз
for i in ARGV
  if i == "-" || i == "+" || i == "/" || i == "*" || i == "×"
    # якщо стек, що має містити оператори, порожній, то додаємо туди перший знайдений оператор з виразу
    if help_stack.length == 0
      help_stack.push(i)
    else
      # перевіримо пріорітети оператора у віразі і того, що міститься у стеку
      operator_priority = check_priority(operators, i)
      stack_operator_priority = check_priority(operators, help_stack.last)
      # пройдемо весь стек; якщо пріорітети операторів задовільняють умові, то...
      while operator_priority <= stack_operator_priority && help_stack.length != 0 do
        result.push(help_stack.last) # додаємо останній оператор у стеку до кінцевого результату
        help_stack.pop # видаляємо останній елемент стеку
        stack_operator_priority = check_priority(operators, help_stack.last) # повторно визначаємо пріорітет
      end
      help_stack.push(i) # вставляємо новій оператор до стеку
    end
  else
    # якщо попередні умови не були виконані, то це лише цифра / число, що ми одразу записали у результат
    result.push(i)
  end
end

# звільняемо стек та формуємо кінцевий результат
while help_stack.length != 0 do
  result.push(help_stack.last)
  help_stack.pop
end

# поелементно виводимо масив-лист з кінцевим результатом
# (фактично, цей блок коду було зроблено виключно для "естетичного" вигляду кінцевого результату)
print "Вираз у ПІЗ: "
for index in result
  print "#{index} "
end
print "\n"

puts("Дякуємо за використання додатку!\nКінець роботи скрипт-програми!")
puts("-----------------------------------------------------------")